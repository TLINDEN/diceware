.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DICEPWGEN 1"
.TH DICEPWGEN 1 "2015-08-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
dicepwgen \- A diceware password generator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    Usage: dice [\-tcfvhd]
\&    Options:
\&    \-t \-\-humantoss            Asks interactively for rolled dices
\&    \-c \-\-wordcount <count>    Number of words (default: 4)
\&    \-f \-\-dictfile <dictfile>  Dictionary file to use (default:
\&                              /usr/share/dict/american\-english)
\&    \-l \-\-minlen <count>       Minimum word len (default: 5)
\&    \-m \-\-maxlen <count>       Maximum word len (default: 10)
\&    \-n \-\-dontjump             Use all words in the dict file, e.g.
\&                              if it is an original diceware list
\&    \-d \-\-debug                Enable debug output
\&    \-v \-\-version              Print program version
\&    \-h \-? \-\-help              Print this help screen
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
dicepwgen generates a diceware password using a dictionary
file. By default it uses pseudo random dice tosses, but
it is also possible to use real dices and enter the numbers
by using the option \fB\-t\fR, which is the most secure way
to generate diceware passwords.
.PP
The option \fB\-c\fR can be used to tweak the number of words
to output. The options \fB\-l\fR and \fB\-m\fR can be used to tweak
minimum and maximum word length.
.PP
You can tell dicepwgen to use another dictionary file with
the option \fB\-f\fR.
.PP
If you're using a precomputed diceware list, use the parameter
\&\fB\-n\fR, in which case dicepwgen will use all entries in the file.
.PP
The program only uses words which contain 7bit \s-1ASCII\s0 letters
(a\-zA\-Z0\-9), which are easier for password usage anyway.
.SH "FILES"
.IX Header "FILES"
\&\fB/usr/share/dict/american\-english\fR: default dictionary file.
.PP
You can use almost any dictionary file you want. Dicepwgen expects
the file to be in the following format: one word per line.
.PP
You can also use precomputed diceware word lists by adding the
option \fB\-n\fR to the commandline. If the file already contains
numbers, you have to remove them before using. Say, the file
looks like this:
.PP
.Vb 4
\& 11126   abase
\& 11131   abash
\& 11132   abate
\& 11133   abbas
.Ve
.PP
Prepare the file with this shell oneliner:
.PP
.Vb 1
\& grep "^[0\-9]" dicewarelist.txt | awk \*(Aq{print $2}\*(Aq >> newlist.txt
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://world.std.com/~reinhold/diceware.html>
.PP
<https://xkcd.com/936/>.
.SH "BUGS"
.IX Header "BUGS"
In order to report a bug, unexpected behavior, feature requests
or to submit a patch, please open an issue on github:
<https://github.com/TLINDEN/diceware/issues>.
.PP
Current known issues:
.IP "\(bu" 4
The program does not count the lines in a dictionary file before
using it. If the file contains a low number of entries (e.g. because
it is a precomputed diceware word list and \fB\-n\fR has not been
specified), it seems to \*(L"hang\*(R". In fact it runs very long because it
jumps over a random number of entries and restarts from the beginning
again and again til the required number of words has been collected (7776).
.SH "LICENSE"
.IX Header "LICENSE"
This software is licensed under the \s-1GNU GENERAL PUBLIC LICENSE\s0 version 3.
.PP
Copyright (c) 2015 by T. v. Dein.
.SH "AUTHORS"
.IX Header "AUTHORS"
T.v.Dein \fBtom \s-1AT\s0 vondein \s-1DOT\s0 org\fR
